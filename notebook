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
OMR知识点
##增加
from book.models import BookInfo
# method 1
book=BookInfo(
    name='Django',
    pub_date='2000-1-1',
    readcount=10
)
#这种方法必须要使用save（）方法才能将数据保存到数据库中
book.save()
#method 2
#objects 相当于一个代理 实现增删改查
BookInfo.objects.create(
    name='测试开发入门',
    pub_date='2020-1-1',
    readcount=100
)
##修改
# method 1
book=BookInfo.objects.get(id=6)
book.name='运维开发入门'
#想要保存数据 还是要用到save（）
book.save()
# method 2
#filter 也是查询
BookInfo.objects.filter(id=6).update(name='爬虫入门')

##删除
#方式1
book=BookInfo.objects.get(id=6)
#删除分两种，物理删除 和 逻辑删除
book.delete()
#方式2
BookInfo.objects.get(id=6).delete()
BookInfo.objects.filter(id=5).delete()
"""
这两种删除方式是有区别的
1 使用filter可以一次删除多个符合条件的对象
  但是使用get一次只能删除一个对象
2 使用filter会立即执行sql语句从数据库汇中删除对象
  但是get需要先从数据库中获取对象，然后再删除掉
"""

##Get和Filter
#get查询单一结果，如果不存在会抛出模型类.DoesNotExist异常
try:
    book=BookInfo.objects.get(id=1)
except BookInfo.DoesNotExist:
    print("查询结果不存在")

#all查询多个结果
#count查询结果数量
#BookInfo.objects.all().count()
#BookInfo.objects.count()

################过滤查询#############
#
#filter过滤出多个结果
#exclude排除掉符合条件剩下的结果
#get过滤单一结果

#模型类名.objects.filter(属性名__运算符=值）
#模型类名.objects.exclude(属性名__运算符=值）
#模型类名.objects.get(属性名__运算符=值）     只能获得一个结果或者是异常

查询书名中带湖字的图书
BookInfo.objects.filter(name__contains='湖')
查询书名以部结尾的图书
BookInfo.objects.filter(name__endswith='部')
查询书名为空的图书
BookInfo.objects.filter(name__isnull=True)
查询编号为1或3或5的图书
BookInfo.objects.filter(id__in=[1, 3, 5])
查询编号大于3的图书 大于gt 大于等于gte 小于lt 小于等于lte
BookInfo.objects.filter(id__gt=3)
查询编号不等于3的书
BookInfo.objects.exclude(id=3)
查询1980年发布的图书
BookInfo.objects.filter(pub_date__year=1980)
查询1990年1月1日之后发布的图书
BookInfo.objects.filter(pub_date__gt='1990-1-1')

F对象
当要对两个属性进行比较的时候 使用F对象
F对象被定义在django.db.models中

#查询阅读量大于评论量2倍的图书
BookInfo.objects.filter(readcount__gt=F('commentcount')*2)

#并且查询
查询阅读量大于20，并且编号小于3的图书
BookInfo.objects.filter(readcount__gt=20).filter(id__lt=3)
BookInfo.objects.filter(readcount__gt=20, id__lt=3)
#或者查询
Q对象
from django.db.models import Q
#或者语法： 模型类型.objects.filter(Q(属性名__运算符=值)|Q（）|Q（））
#并且语法： 模型类型.objects.filter(Q(属性名__运算符=值)&Q（）&Q（））
#非语法： 模型类型.objects.filter(～Q(属性名__运算符=值)
查询阅读量大于20，或者编号小于3的书籍
BookInfo.objects.filter(Q(readcount__gt=30)|Q(id__lt=3))

